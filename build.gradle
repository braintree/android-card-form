buildscript {
    repositories {
        google()
        mavenCentral()
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
    }

    def targetJavaVersion = JavaVersion.VERSION_17
    ext.versions = [
            "javaSourceCompatibility": targetJavaVersion,
            "javaTargetCompatibility": targetJavaVersion,
    ]

    dependencies {
        classpath 'com.android.tools.build:gradle:8.5.2'
    }
}

plugins {
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

version '5.4.1-SNAPSHOT'
ext {
    compileSdkVersion = 35
    minSdkVersion = 21
    targetSdkVersion = 35
    versionCode = 52
    versionName = version
}

allprojects {
    repositories {
        mavenCentral()
        google()
    }
}

nexusPublishing {
    packageGroup = "com.braintreepayments"

    repositories {
        sonatype {
            username = System.getenv('SONATYPE_USERNAME') ?: ''
            password = System.getenv('SONATYPE_PASSWORD') ?: ''
        }
    }

    transitionCheckOptions {
        // give nexus sonatype more time to close the staging repository
        delayBetween.set(Duration.ofSeconds(20))
    }
}

task changeReleaseVersion {
    doLast {
        def gradleFile = new File('build.gradle')
        def gradleFileText = gradleFile.text.replaceFirst("\\nversion '\\d+\\.\\d+\\.\\d+(-.*)?'", "\nversion '" + versionParam + "'")
        gradleFile.write(gradleFileText)
    }
}

task changeREADMEVersion {
    doLast {
        def readmeFile = new File('README.md')
        def readmeFileText = readmeFile.text.replaceFirst("com.braintreepayments.api:card-form:\\d+\\.\\d+\\.\\d+(-.*)?'", "com.braintreepayments.api:card-form:" + versionParam + "'")
        readmeFile.write(readmeFileText)
    }
}

task incrementSNAPSHOTVersion {
    doLast {
        def gradleFile = new File('build.gradle')
        def (major, minor, patch) = versionParam.tokenize('.')
        def patchInteger = patch.toInteger()
        def newVersion = "$major.$minor.${patchInteger + 1}-SNAPSHOT"
        def gradleFileText = gradleFile.text.replaceFirst("\\nversion '\\d+\\.\\d+\\.\\d+(-.*)?'", "\nversion '" + newVersion + "'")
        gradleFile.write(gradleFileText)
    }
}

task incrementVersionCode {
    doLast {
        def gradleFile = new File('build.gradle')
        def versionText = gradleFile.text.find("versionCode = \\d+")
        def params = versionText.split("=")
        def newVersionCode = params[1].trim().toInteger() + 1
        def gradleFileText = gradleFile.text.replaceFirst("versionCode = \\d+", "versionCode = " + newVersionCode)
        gradleFile.write(gradleFileText)
    }
}